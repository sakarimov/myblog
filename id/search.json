[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Just Another Attempt to Contribute",
    "section": "",
    "text": "Ini adalah ruang kecil milik saya di internet, tempat saya berbagi pemikiran, proyek, dan pelajaran dari perjalanan saya sebagai programmer, pembelajar, dan seorang muslim.\nDulu saya sering ragu untuk berbagi — takut salah, takut tidak cukup baik. Tapi saya sadar: pertumbuhan terjadi ketika kita berbagi — bukan karena kita sempurna, tapi karena kita tulus.\nDari sinilah saya ingin membagikan apa pun yang bisa saya bagi, sekecil apa pun. Baik itu potongan kode, refleksi, atau ide sederhana — saya niatkan semua ini untuk memberi manfaat.\n\nBocah Angon Penekno Blimbing Kuwi\nLunyu Lunyu Penekno Kanggo Mbasuh Dodot Iro\n\nJika ada yang Anda temukan di sini dan itu bermanfaat atau menginspirasi — alhamdulillah. Jika belum, tidak apa-apa — saya masih belajar, masih tumbuh, dan saya bersyukur Anda telah mampir.\nBismillah — mari kita membangun, merenung, dan belajar bersama.\n— Sulthan A. Karimov —"
  },
  {
    "objectID": "index.html#selamat-datang",
    "href": "index.html#selamat-datang",
    "title": "Just Another Attempt to Contribute",
    "section": "",
    "text": "Ini adalah ruang kecil milik saya di internet, tempat saya berbagi pemikiran, proyek, dan pelajaran dari perjalanan saya sebagai programmer, pembelajar, dan seorang muslim.\nDulu saya sering ragu untuk berbagi — takut salah, takut tidak cukup baik. Tapi saya sadar: pertumbuhan terjadi ketika kita berbagi — bukan karena kita sempurna, tapi karena kita tulus.\nDari sinilah saya ingin membagikan apa pun yang bisa saya bagi, sekecil apa pun. Baik itu potongan kode, refleksi, atau ide sederhana — saya niatkan semua ini untuk memberi manfaat.\n\nBocah Angon Penekno Blimbing Kuwi\nLunyu Lunyu Penekno Kanggo Mbasuh Dodot Iro\n\nJika ada yang Anda temukan di sini dan itu bermanfaat atau menginspirasi — alhamdulillah. Jika belum, tidak apa-apa — saya masih belajar, masih tumbuh, dan saya bersyukur Anda telah mampir.\nBismillah — mari kita membangun, merenung, dan belajar bersama.\n— Sulthan A. Karimov —"
  },
  {
    "objectID": "posts/Algorithms/001_Constraints_Programming_with_OR_Tools.html",
    "href": "posts/Algorithms/001_Constraints_Programming_with_OR_Tools.html",
    "title": "Pemrograman Kendala dengan OR-Tools",
    "section": "",
    "text": "Dalam banyak skenario dunia nyata, kita sering dihadapkan pada masalah yang melibatkan serangkaian keputusan yang harus dibuat dengan batasan tertentu. Contohnya termasuk penjadwalan shift karyawan, menyusun jadwal pelajaran sekolah, atau mengoptimalkan rute pengiriman barang. Masalah-masalah ini dikenal sebagai masalah optimasi kombinatorial, dan seringkali sulit diselesaikan dengan pendekatan brute force atau heuristik sederhana.\nDi sinilah pemrograman kendala (constraint programming) berperan — sebuah paradigma yang dirancang untuk menyelesaikan masalah seperti ini secara efisien. OR-Tools dari Google adalah toolkit open-source yang sangat kuat dan menyediakan pemecah kendala (constraint solver) serta mesin optimasi lainnya. Dalam artikel ini, kita akan mengeksplorasi bagaimana menggunakan OR-Tools dalam Python untuk memodelkan dan menyelesaikan masalah penjadwalan dengan kendala keras (hard constraints).\nContoh kasus kita: Menjadwalkan mata pelajaran ke dalam slot waktu mingguan di kelas, di mana setiap mata pelajaran memiliki jumlah jam tertentu, dan tidak boleh ada tumpang tindih mata pelajaran dalam satu kelas pada waktu yang sama.\nYuk kita mulai!",
    "crumbs": [
      "Posts",
      "Algorithms",
      "Pemrograman Kendala dengan OR-Tools"
    ]
  },
  {
    "objectID": "posts/Algorithms/001_Constraints_Programming_with_OR_Tools.html#pendahuluan-mengapa-pemrograman-kendala",
    "href": "posts/Algorithms/001_Constraints_Programming_with_OR_Tools.html#pendahuluan-mengapa-pemrograman-kendala",
    "title": "Pemrograman Kendala dengan OR-Tools",
    "section": "",
    "text": "Dalam banyak skenario dunia nyata, kita sering dihadapkan pada masalah yang melibatkan serangkaian keputusan yang harus dibuat dengan batasan tertentu. Contohnya termasuk penjadwalan shift karyawan, menyusun jadwal pelajaran sekolah, atau mengoptimalkan rute pengiriman barang. Masalah-masalah ini dikenal sebagai masalah optimasi kombinatorial, dan seringkali sulit diselesaikan dengan pendekatan brute force atau heuristik sederhana.\nDi sinilah pemrograman kendala (constraint programming) berperan — sebuah paradigma yang dirancang untuk menyelesaikan masalah seperti ini secara efisien. OR-Tools dari Google adalah toolkit open-source yang sangat kuat dan menyediakan pemecah kendala (constraint solver) serta mesin optimasi lainnya. Dalam artikel ini, kita akan mengeksplorasi bagaimana menggunakan OR-Tools dalam Python untuk memodelkan dan menyelesaikan masalah penjadwalan dengan kendala keras (hard constraints).\nContoh kasus kita: Menjadwalkan mata pelajaran ke dalam slot waktu mingguan di kelas, di mana setiap mata pelajaran memiliki jumlah jam tertentu, dan tidak boleh ada tumpang tindih mata pelajaran dalam satu kelas pada waktu yang sama.\nYuk kita mulai!",
    "crumbs": [
      "Posts",
      "Algorithms",
      "Pemrograman Kendala dengan OR-Tools"
    ]
  },
  {
    "objectID": "posts/Algorithms/001_Constraints_Programming_with_OR_Tools.html#mendefinisikan-masalah-penjadwalan",
    "href": "posts/Algorithms/001_Constraints_Programming_with_OR_Tools.html#mendefinisikan-masalah-penjadwalan",
    "title": "Pemrograman Kendala dengan OR-Tools",
    "section": "2 Mendefinisikan Masalah Penjadwalan",
    "text": "2 Mendefinisikan Masalah Penjadwalan\nKita memiliki daftar mata pelajaran dan kelas. Setiap mata pelajaran memiliki jumlah jam per minggu. Tujuan kita adalah menjadwalkan mata pelajaran ke dalam slot waktu mingguan sehingga:\n\nSetiap mata pelajaran dijadwalkan sesuai jumlah jam yang dibutuhkan.\nSetiap kelas hanya boleh memiliki satu mata pelajaran dalam satu slot.\n\nBerikut definisi mata pelajaran dan kelas:\n\n\nKode\nsubjects = {\n    \"PAI\": {\"hour\": 2},\n    \"Al-Qur'an\": {\"hour\": 3},\n    \"Olahraga\": {\"hour\": 2},\n}\n\nclassrooms = [\"Kelas1_C0\", \"Kelas1_C1\"]\n\nweekdays = [\"Senin\", \"Selasa\", \"Rabu\", \"Kamis\", \"Jumat\"]\nhours = [\"07.00\", \"08.00\", \"09.00\", \"10.00\", \"11.00\", \"13.00\"]\nslots = [(d, h) for d in weekdays for h in hours]",
    "crumbs": [
      "Posts",
      "Algorithms",
      "Pemrograman Kendala dengan OR-Tools"
    ]
  },
  {
    "objectID": "posts/Algorithms/001_Constraints_Programming_with_OR_Tools.html#membangun-model-kendala",
    "href": "posts/Algorithms/001_Constraints_Programming_with_OR_Tools.html#membangun-model-kendala",
    "title": "Pemrograman Kendala dengan OR-Tools",
    "section": "3 Membangun Model Kendala",
    "text": "3 Membangun Model Kendala\nKita akan menggunakan cp_model dari OR-Tools untuk mendefinisikan variabel dan kendala.\n\n\nKode\nfrom ortools.sat.python import cp_model\n\nmodel = cp_model.CpModel()\n\n# Variabel: is_subject_assigned[(kelas, mata pelajaran, slot)] = 1 jika dijadwalkan di slot tersebut\nis_subject_assigned = {}\nfor cls in classrooms:\n    for subj in subjects:\n        for slot in slots:\n            is_subject_assigned[(cls, subj, slot)] = model.NewBoolVar(f\"{cls}_{subj}_{slot}\")",
    "crumbs": [
      "Posts",
      "Algorithms",
      "Pemrograman Kendala dengan OR-Tools"
    ]
  },
  {
    "objectID": "posts/Algorithms/001_Constraints_Programming_with_OR_Tools.html#menambahkan-kendala-ke-model",
    "href": "posts/Algorithms/001_Constraints_Programming_with_OR_Tools.html#menambahkan-kendala-ke-model",
    "title": "Pemrograman Kendala dengan OR-Tools",
    "section": "4 Menambahkan Kendala ke Model",
    "text": "4 Menambahkan Kendala ke Model\n\n4.1 1. Setiap mata pelajaran dijadwalkan sesuai jumlah jamnya:\n\n\nKode\nsubject_slots_per_classroom_subject = {}\nfor cls in classrooms:\n    for subj, subject in subjects.items():\n        assigned_slots = [is_subject_assigned[(cls, subj, slot)] for slot in slots]\n        var = model.NewIntVar(0, len(slots), f\"hours_{cls}_{subj}\")\n        model.Add(var == sum(assigned_slots))\n        model.Add(var == subject[\"hour\"])\n        subject_slots_per_classroom_subject[(cls, subj)] = var\n\n\n\n\n4.2 2. Satu kelas hanya boleh memiliki satu mata pelajaran dalam satu slot:\n\n\nKode\nfor cls in classrooms:\n    for slot in slots:\n        one_subject_per_slot = [is_subject_assigned[(cls, subj, slot)] for subj in subjects]\n        model.Add(sum(one_subject_per_slot) &lt;= 1)",
    "crumbs": [
      "Posts",
      "Algorithms",
      "Pemrograman Kendala dengan OR-Tools"
    ]
  },
  {
    "objectID": "posts/Algorithms/001_Constraints_Programming_with_OR_Tools.html#menyelesaikan-model",
    "href": "posts/Algorithms/001_Constraints_Programming_with_OR_Tools.html#menyelesaikan-model",
    "title": "Pemrograman Kendala dengan OR-Tools",
    "section": "5 Menyelesaikan Model",
    "text": "5 Menyelesaikan Model\nSekarang kita jalankan solver dan cetak hasil jadwal jika solusi ditemukan.\n\n\nKode\nsolver = cp_model.CpSolver()\nstatus = solver.Solve(model)\n\nif status == cp_model.FEASIBLE or status == cp_model.OPTIMAL:\n    for cls in classrooms:\n        print(f\"\\nJadwal untuk {cls}:\")\n        for day in weekdays:\n            print(f\"  {day}:\")\n            for hour in hours:\n                slot = (day, hour)\n                subject_found = False\n                for subj in subjects:\n                    if solver.Value(is_subject_assigned[(cls, subj, slot)]) == 1:\n                        print(f\"    {hour}: {subj}\")\n                        subject_found = True\n                if not subject_found:\n                    print(f\"    {hour}: -\")\nelse:\n    print(\"Tidak ada solusi ditemukan.\")\n\n\n\nJadwal untuk Kelas1_C0:\n  Senin:\n    07.00: -\n    08.00: Al-Qur'an\n    09.00: Al-Qur'an\n    10.00: -\n    11.00: -\n    13.00: -\n  Selasa:\n    07.00: -\n    08.00: -\n    09.00: -\n    10.00: -\n    11.00: -\n    13.00: Olahraga\n  Rabu:\n    07.00: -\n    08.00: PAI\n    09.00: -\n    10.00: -\n    11.00: -\n    13.00: -\n  Kamis:\n    07.00: -\n    08.00: -\n    09.00: -\n    10.00: -\n    11.00: -\n    13.00: -\n  Jumat:\n    07.00: Al-Qur'an\n    08.00: PAI\n    09.00: -\n    10.00: -\n    11.00: Olahraga\n    13.00: -\n\nJadwal untuk Kelas1_C1:\n  Senin:\n    07.00: -\n    08.00: -\n    09.00: -\n    10.00: -\n    11.00: -\n    13.00: -\n  Selasa:\n    07.00: -\n    08.00: -\n    09.00: -\n    10.00: Al-Qur'an\n    11.00: -\n    13.00: -\n  Rabu:\n    07.00: -\n    08.00: PAI\n    09.00: -\n    10.00: -\n    11.00: -\n    13.00: -\n  Kamis:\n    07.00: Al-Qur'an\n    08.00: -\n    09.00: -\n    10.00: Olahraga\n    11.00: Olahraga\n    13.00: Al-Qur'an\n  Jumat:\n    07.00: -\n    08.00: -\n    09.00: -\n    10.00: -\n    11.00: -\n    13.00: PAI",
    "crumbs": [
      "Posts",
      "Algorithms",
      "Pemrograman Kendala dengan OR-Tools"
    ]
  },
  {
    "objectID": "posts/Algorithms/001_Constraints_Programming_with_OR_Tools.html#contoh-keluaran",
    "href": "posts/Algorithms/001_Constraints_Programming_with_OR_Tools.html#contoh-keluaran",
    "title": "Pemrograman Kendala dengan OR-Tools",
    "section": "6 Contoh Keluaran",
    "text": "6 Contoh Keluaran\nContoh hasil jadwal untuk Kelas1_C0:\nJadwal untuk Kelas1_C0:\n  Senin:\n    07.00: PAI\n    08.00: Al-Qur'an\n    09.00: Al-Qur'an\n    ...\n(Hasil dapat berbeda tergantung bagaimana solver menetapkan slot.)",
    "crumbs": [
      "Posts",
      "Algorithms",
      "Pemrograman Kendala dengan OR-Tools"
    ]
  },
  {
    "objectID": "posts/Algorithms/001_Constraints_Programming_with_OR_Tools.html#kesimpulan",
    "href": "posts/Algorithms/001_Constraints_Programming_with_OR_Tools.html#kesimpulan",
    "title": "Pemrograman Kendala dengan OR-Tools",
    "section": "7 Kesimpulan",
    "text": "7 Kesimpulan\nKita telah memodelkan masalah penjadwalan sederhana menggunakan pemrograman kendala dengan OR-Tools. Kita:\n\nMendefinisikan mata pelajaran dan kelas\nMembuat variabel keputusan biner\nMenambahkan kendala keras untuk jumlah jam dan eksklusivitas\nMenyelesaikan dan mencetak jadwal\n\nIni baru permulaan — kamu bisa menambahkan lebih banyak kendala seperti ketersediaan guru, preferensi waktu, atau kendala lunak (misalnya meminimalkan jeda antar pelajaran). Pemrograman kendala menawarkan pendekatan deklaratif yang kuat untuk menyelesaikan masalah penjadwalan kompleks.\n\n7.1 🔗 Sumber Belajar\n\nDokumentasi Google OR-Tools\nContoh Python OR-Tools\nMiniZinc – sistem CP populer lainnya\n\nJika kamu ingin memperluas tutorial ini ke optimasi atau kendala lunak, tinggal beri tahu saya!",
    "crumbs": [
      "Posts",
      "Algorithms",
      "Pemrograman Kendala dengan OR-Tools"
    ]
  },
  {
    "objectID": "posts/Data Science/Machine Learning/ML - Supervised Learning.html",
    "href": "posts/Data Science/Machine Learning/ML - Supervised Learning.html",
    "title": "Machine Learning - Supervised Learning",
    "section": "",
    "text": "import graphviz\n\n# This output is generated from the model\n# as you can see, there are several decisions \n# to make, and the hyrarchy can be compiled like a tree\ngraphviz.Source.from_file('cache/iristree.dot')\nfirst we need to import pandas and load the data with pd.read_csv(file)\nimport pandas as pd\n\niris = pd.read_csv('datasets/iris/Iris.csv')\nthis is the overview of the data\niris\n\n\n\n\n\n\n\n\n\nId\nSepalLengthCm\nSepalWidthCm\nPetalLengthCm\nPetalWidthCm\nSpecies\n\n\n\n\n0\n1\n5.1\n3.5\n1.4\n0.2\nIris-setosa\n\n\n1\n2\n4.9\n3.0\n1.4\n0.2\nIris-setosa\n\n\n2\n3\n4.7\n3.2\n1.3\n0.2\nIris-setosa\n\n\n3\n4\n4.6\n3.1\n1.5\n0.2\nIris-setosa\n\n\n4\n5\n5.0\n3.6\n1.4\n0.2\nIris-setosa\n\n\n...\n...\n...\n...\n...\n...\n...\n\n\n145\n146\n6.7\n3.0\n5.2\n2.3\nIris-virginica\n\n\n146\n147\n6.3\n2.5\n5.0\n1.9\nIris-virginica\n\n\n147\n148\n6.5\n3.0\n5.2\n2.0\nIris-virginica\n\n\n148\n149\n6.2\n3.4\n5.4\n2.3\nIris-virginica\n\n\n149\n150\n5.9\n3.0\n5.1\n1.8\nIris-virginica\n\n\n\n\n150 rows × 6 columns\nif we wan to check detail about the data, use data.info()\niris.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 150 entries, 0 to 149\nData columns (total 6 columns):\n #   Column         Non-Null Count  Dtype  \n---  ------         --------------  -----  \n 0   Id             150 non-null    int64  \n 1   SepalLengthCm  150 non-null    float64\n 2   SepalWidthCm   150 non-null    float64\n 3   PetalLengthCm  150 non-null    float64\n 4   PetalWidthCm   150 non-null    float64\n 5   Species        150 non-null    object \ndtypes: float64(4), int64(1), object(1)\nmemory usage: 7.2+ KB\nthe Id is not needed in this case, therefore we can just drop it\n# stropping unneeded data\niris.drop('Id', axis=1, inplace=True)\n\n\n\n\n\n\n\n\n\nId\nSepalLengthCm\nSepalWidthCm\nPetalLengthCm\nPetalWidthCm\nSpecies\n\n\n\n\n0\n1\n5.1\n3.5\n1.4\n0.2\nIris-setosa\n\n\n1\n2\n4.9\n3.0\n1.4\n0.2\nIris-setosa\n\n\n2\n3\n4.7\n3.2\n1.3\n0.2\nIris-setosa\n\n\n3\n4\n4.6\n3.1\n1.5\n0.2\nIris-setosa\n\n\n4\n5\n5.0\n3.6\n1.4\n0.2\nIris-setosa\nnow, we separate the data label from its features, and save it to X and y, we need also to separate the data to train and split\nX = iris[['SepalLengthCm', 'SepalWidthCm', 'PetalLengthCm', 'PetalWidthCm']]\ny = iris['Species']\n\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=123)\nwe prepare the model by calling it from sklearn.tree\nfrom sklearn import tree\n\nclf = tree.DecisionTreeClassifier()\n# With defined train test split\n\nclf = clf.fit(X_train, y_train)",
    "crumbs": [
      "Posts",
      "Data Science",
      "Machine Learning",
      "Machine Learning - Supervised Learning"
    ]
  },
  {
    "objectID": "posts/Data Science/Machine Learning/ML - Supervised Learning.html#linear-regression",
    "href": "posts/Data Science/Machine Learning/ML - Supervised Learning.html#linear-regression",
    "title": "Machine Learning - Supervised Learning",
    "section": "Linear Regression",
    "text": "Linear Regression\n\nimport numpy as np\n\n# make dummy data of rooms\nbedrooms = np.array([1,1,2,2,3,4,4,5,5,5])\n \n# make dummy price data in dolar\nhouse_price = np.array([15000, 18000, 27000, 34000, 50000, 68000, 65000, 81000,85000, 90000])\n\n\n# visualize in scatterplot\nimport matplotlib.pyplot as plt\n%matplotlib inline\n \nplt.scatter(bedrooms, house_price)\n\n\n\n\n\n\n\n\n\nfrom sklearn.linear_model import LinearRegression\n \n# train the model with LinearRegression.fit()\nbedrooms = bedrooms.reshape(-1, 1)\nlinreg = LinearRegression()\nlinreg.fit(bedrooms, house_price)\n\nLinearRegression()In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.  LinearRegression?Documentation for LinearRegressioniFittedLinearRegression() \n\n\n\n# plotting the corelation between number of rooms and house_prices\nplt.scatter(bedrooms, house_price)\nplt.plot(bedrooms, linreg.predict(bedrooms))",
    "crumbs": [
      "Posts",
      "Data Science",
      "Machine Learning",
      "Machine Learning - Supervised Learning"
    ]
  },
  {
    "objectID": "posts/Data Science/Machine Learning/ML - Supervised Learning.html#logistic-regression",
    "href": "posts/Data Science/Machine Learning/ML - Supervised Learning.html#logistic-regression",
    "title": "Machine Learning - Supervised Learning",
    "section": "Logistic Regression",
    "text": "Logistic Regression\n\nimport pandas as pd\n\ndf = pd.read_csv('datasets/socmedAds/Social_Network_Ads.csv')\ndf\n\n\n\n\n\n\n\n\n\nUser ID\nGender\nAge\nEstimatedSalary\nPurchased\n\n\n\n\n0\n15624510\nMale\n19\n19000\n0\n\n\n1\n15810944\nMale\n35\n20000\n0\n\n\n2\n15668575\nFemale\n26\n43000\n0\n\n\n3\n15603246\nFemale\n27\n57000\n0\n\n\n4\n15804002\nMale\n19\n76000\n0\n\n\n...\n...\n...\n...\n...\n...\n\n\n395\n15691863\nFemale\n46\n41000\n1\n\n\n396\n15706071\nMale\n51\n23000\n1\n\n\n397\n15654296\nFemale\n50\n20000\n1\n\n\n398\n15755018\nMale\n36\n33000\n0\n\n\n399\n15594041\nFemale\n49\n36000\n1\n\n\n\n\n400 rows × 5 columns\n\n\n\n\n\ndf.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 400 entries, 0 to 399\nData columns (total 5 columns):\n #   Column           Non-Null Count  Dtype \n---  ------           --------------  ----- \n 0   User ID          400 non-null    int64 \n 1   Gender           400 non-null    object\n 2   Age              400 non-null    int64 \n 3   EstimatedSalary  400 non-null    int64 \n 4   Purchased        400 non-null    int64 \ndtypes: int64(4), object(1)\nmemory usage: 15.8+ KB\n\n\n\ndata = df.drop(columns=['User ID'])\n\ndata = pd.get_dummies(data)\ndata\n\n\n\n\n\n\n\n\n\nAge\nEstimatedSalary\nPurchased\nGender_Female\nGender_Male\n\n\n\n\n0\n19\n19000\n0\nFalse\nTrue\n\n\n1\n35\n20000\n0\nFalse\nTrue\n\n\n2\n26\n43000\n0\nTrue\nFalse\n\n\n3\n27\n57000\n0\nTrue\nFalse\n\n\n4\n19\n76000\n0\nFalse\nTrue\n\n\n...\n...\n...\n...\n...\n...\n\n\n395\n46\n41000\n1\nTrue\nFalse\n\n\n396\n51\n23000\n1\nFalse\nTrue\n\n\n397\n50\n20000\n1\nTrue\nFalse\n\n\n398\n36\n33000\n0\nFalse\nTrue\n\n\n399\n49\n36000\n1\nTrue\nFalse\n\n\n\n\n400 rows × 5 columns\n\n\n\n\n\nX = data[['Age', 'EstimatedSalary', 'Gender_Female', 'Gender_Male']]\ny = data['Purchased']\n\n\n# data normalization\nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\n# calculating the mean and standard deviation of every attribute column\n# to be used on every transform function\nscaler.fit(X)\nscaled_data = scaler.transform(X)\nscaled_data = pd.DataFrame(scaled_data, columns=X.columns)\nscaled_data\n\n\n\n\n\n\n\n\n\nAge\nEstimatedSalary\nGender_Female\nGender_Male\n\n\n\n\n0\n-1.781797\n-1.490046\n-1.020204\n1.020204\n\n\n1\n-0.253587\n-1.460681\n-1.020204\n1.020204\n\n\n2\n-1.113206\n-0.785290\n0.980196\n-0.980196\n\n\n3\n-1.017692\n-0.374182\n0.980196\n-0.980196\n\n\n4\n-1.781797\n0.183751\n-1.020204\n1.020204\n\n\n...\n...\n...\n...\n...\n\n\n395\n0.797057\n-0.844019\n0.980196\n-0.980196\n\n\n396\n1.274623\n-1.372587\n-1.020204\n1.020204\n\n\n397\n1.179110\n-1.460681\n0.980196\n-0.980196\n\n\n398\n-0.158074\n-1.078938\n-1.020204\n1.020204\n\n\n399\n1.083596\n-0.990844\n0.980196\n-0.980196\n\n\n\n\n400 rows × 4 columns\n\n\n\n\n\n# validation with cross validation\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn import linear_model\n\nmodel = linear_model.LogisticRegression()\nscores = cross_val_score(model, scaled_data, y, cv=5)\n\n\nscores\n\narray([0.7   , 0.95  , 0.9375, 0.8125, 0.7   ])\n\n\n\nfrom sklearn.model_selection import train_test_split\n \nX_train, X_test, y_train, y_test = train_test_split(scaled_data, y, test_size=0.2, random_state=1)\n\n\nmodel.fit(X_train, y_train)\n\nLogisticRegression()In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.  LogisticRegression?Documentation for LogisticRegressioniFittedLogisticRegression() \n\n\n\n# examine model accuracy\nmodel.score(X_test, y_test)\n\n0.825",
    "crumbs": [
      "Posts",
      "Data Science",
      "Machine Learning",
      "Machine Learning - Supervised Learning"
    ]
  },
  {
    "objectID": "posts/Exercises/numpy task1 solution.html",
    "href": "posts/Exercises/numpy task1 solution.html",
    "title": "Solusi Tugas numpy 1",
    "section": "",
    "text": "import numpy as np\n\nload_file = np.loadtxt('numpy data1.txt')\ndata = load_file.reshape(4,7,4)",
    "crumbs": [
      "Posts",
      "Exercises",
      "Solusi Tugas numpy 1"
    ]
  },
  {
    "objectID": "posts/Exercises/numpy task1 solution.html#todo",
    "href": "posts/Exercises/numpy task1 solution.html#todo",
    "title": "Solusi Tugas numpy 1",
    "section": "TODO",
    "text": "TODO\n\nimport numpy as np\n\n# Asumsikan data penjualan Anda berada dalam array NumPy bernama \"sales_data\"\n\n# Langkah 1: Pilih data untuk kategori tertentu (misalnya, kemeja)\n# Ganti \"category_index\" dengan indeks aktual untuk kemeja\nkategori_yang_diminati = 0  # Misalkan kemeja adalah kategori 0\npenjualan_kemeja = data[:, kategori_yang_diminati, :]  # Pilih data untuk kategori ini\n\n# Langkah 2: Hitung total penjualan untuk setiap ukuran (jumlahkan sepanjang sumbu ukuran)\ntotal_per_ukuran = penjualan_kemeja.sum(axis=0)  # Jumlahkan di semua lokasi\n\n# Langkah 3: Analisis distribusi ukuran (tanpa argmax)\n# Temukan nilai maksimum untuk total penjualan tiap ukuran\nmaks_penjualan_ukuran = total_per_ukuran.max()  # Cari total penjualan maksimum\n\n# Buat mask untuk ukuran terpopuler\nmask_terpopuler = total_per_ukuran == maks_penjualan_ukuran  # Bandingkan dengan nilai maksimum\n\n# Identifikasi ukuran terpopuler (menangani kemungkinan seri)\nukuran_terpopuler = np.where(mask_terpopuler)[0]  # Dapatkan indeks elemen True\n\n# Tampilkan hasilnya\nprint(\"Total Penjualan Kemeja per Ukuran:\", total_per_ukuran)\n\n# Tampilkan ukuran terpopuler (menangani seri)\nif len(ukuran_terpopuler) &gt; 1:\n  print(\"Ukuran Kemeja Terpopuler:\", ukuran_terpopuler)\nelse:\n  print(\"Ukuran Kemeja Terpopuler:\", ukuran_terpopuler[0])",
    "crumbs": [
      "Posts",
      "Exercises",
      "Solusi Tugas numpy 1"
    ]
  }
]